import unittest
from src.lab3.sudoku import *


class SudokuTestCase(unittest.TestCase):

    def test_sudoku_check_solution(self):
        array = [['8', '3', '5', '4', '1', '6', '9', '2', '7'], ['2', '9', '6', '8', '5', '7', '4', '3', '1'],
                 ['4', '1', '7', '2', '9', '3', '6', '5', '8'], ['5', '6', '9', '1', '3', '4', '7', '8', '2'],
                 ['1', '2', '3', '6', '7', '8', '5', '4', '9'], ['7', '4', '8', '5', '2', '9', '1', '6', '3'],
                 ['6', '5', '2', '7', '8', '1', '3', '9', '4'], ['9', '8', '1', '3', '4', '5', '2', '7', '6'],
                 ['3', '7', '4', '9', '6', '2', '8', '1', '5']]

        self.assertEqual(check_solution(array), True)

    def test_sudoku_group(self):
        self.assertEqual(group([1, 2, 3, 4, 5, 6], 2), [[1, 2], [3, 4], [5, 6]])


    def test_sudoku_get_row(self):
        self.assertEqual(get_row([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']], (1, 1)), ['4', '5', '6'])


    def test_get_col(self):
        self.assertEqual(get_col([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']], (0, 1)), ['2', '5', '8'])


    def test_get_block(self):
        array = [['8', '3', '5', '4', '1', '6', '9', '2', '7'],
                 ['2', '9', '6', '8', '5', '7', '4', '3', '1'],
                 ['4', '1', '7', '2', '9', '3', '6', '5', '8'],
                 ['5', '6', '9', '1', '3', '4', '7', '8', '2'],
                 ['1', '2', '3', '6', '7', '8', '5', '4', '9'],
                 ['7', '4', '8', '5', '2', '9', '1', '6', '3'],
                 ['6', '5', '2', '7', '8', '1', '3', '9', '4'],
                 ['9', '8', '1', '3', '4', '5', '2', '7', '6'],
                 ['3', '7', '4', '9', '6', '2', '8', '1', '5']]
        self.assertEqual(get_block(array, (8, 8)), ['3', '9', '4', '2', '7', '6', '8', '1', '5'])


    def test_find_empty_positions(self):
        array = [['8', '3', '5', '4', '1', '6', '9', '2', '7'],
                 ['2', '9', '6', '8', '5', '7', '4', '3', '1'],
                 ['4', '1', '7', '2', '9', '3', '6', '5', '8'],
                 ['5', '6', '9', '1', '3', '4', '7', '8', '2'],
                 ['1', '2', '3', '6', '7', '8', '5', '4', '9'],
                 ['7', '4', '8', '5', '2', '9', '1', '6', '3'],
                 ['6', '5', '2', '7', '8', '1', '3', '9', '4'],
                 ['9', '8', '1', '3', '4', '5', '2', '7', '6'],
                 ['3', '7', '4', '9', '6', '2', '8', '1', '5']]
        self.assertEqual(find_empty_positions(array), None)


    def test_find_possible_values(self):
        array = [['8', '3', '5', '4', '1', '6', '9', '2', '7'],
                 ['2', '9', '6', '8', '5', '7', '4', '3', '1'],
                 ['4', '1', '7', '2', '9', '3', '6', '5', '8'],
                 ['5', '6', '9', '1', '3', '4', '7', '8', '2'],
                 ['1', '2', '3', '6', '7', '8', '5', '4', '9'],
                 ['7', '4', '8', '5', '2', '9', '1', '6', '3'],
                 ['6', '5', '2', '7', '8', '1', '3', '9', '4'],
                 ['9', '8', '1', '3', '4', '5', '2', '7', '6'],
                 ['3', '7', '4', '9', '6', '2', '8', '1', '.']]

        self.assertEqual(find_possible_values(array, find_empty_positions(array)), {"5"})


if __name__ == '__main__':
    unittest.main()
